significant.genes <- find.significant.genes(res=res)
# create combination matrix
comb.mat = make_comb_mat(list_to_matrix(significant.genes),mode="intersect")
# define order of sets
set.order <- c()
if(length(significant.genes$welch.DRIVE)>0) {
set.order <- append(set.order,"welch.DRIVE")}
if(length(significant.genes$wilc.DRIVE)>0) {
set.order <- append(set.order,"wilc.DRIVE")}
if(length(significant.genes$bayes.DRIVE)>0) {
set.order <- append(set.order,"bayes.DRIVE")}
if(length(significant.genes$welch.Achilles)>0) {
set.order <- append(set.order,"welch.Achilles")}
if(length(significant.genes$wilc.Achilles)>0) {
set.order <- append(set.order,"wilc.Achilles")}
if(length(significant.genes$bayes.Achilles)>0) {
set.order <- append(set.order,"bayes.Achilles")}
# plot
UpSet(comb.mat,set_order=set.order)
rm(threshold,res,set.order,comb.mat)
# create Boolean matrix for gene in sets
sign.genes.total <- unique(unlist(significant.genes))
genes.set.table <- as.data.frame(cbind(geneID=sign.genes.total))
check.dataset <- function(gene.name,dataset) {
return(gene.name %in% dataset)
}
if(length(sign.genes.welch.DRIVE)>0) {
genes.set.table$welch.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,sign.genes.welch.DRIVE)}
significant.genes$welch.DRIVE
sign.genes.total <- unique(unlist(significant.genes))
genes.set.table <- as.data.frame(cbind(geneID=sign.genes.total))
check.dataset <- function(gene.name,dataset) {
return(gene.name %in% dataset)
}
if(length(significant.genes$welch.DRIVE)>0) {
genes.set.table$welch.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$welch.DRIVE)}
if(length(significant.genes$wilc.DRIVE)>0) {
genes.set.table$wilc.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$wilc.DRIVE)}
if(length(significant.genes$bayes.DRIVE)>0) {
genes.set.table$bayes.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$bayes.DRIVE)}
if(length(significant.genes$welch.Achilles)>0) {
genes.set.table$welch.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$welch.Achilles)}
if(length(significant.genes$wilc.Achilles)>0) {
genes.set.table$wilc.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$wilc.Achilles)}
if(length(significant.genes$bayes.Achilles)>0) {
genes.set.table$bayes.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$bayes.Achilles)}
# count how often genes occur in sets
genes.set.table$sum <- rowSums(genes.set.table[,-1])
# extract all genes that occur in maximal number of sets
max.set <- max(genes.set.table$sum)
final.sign.genes <- filter(genes.set.table,sum==max.set)
# show result
final.sign.genes['geneID'] %>%
kbl(caption = paste("Genes that are significant in",max.set,"sets.")) %>%
kable_styling()
source("helper_functions/create.upset.plot.R")
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(dplyr)
library(ggplot2)
library(kableExtra)
library(matrixTests)
library(limma)
library(ggrepel)
library(gridExtra)
library(ComplexHeatmap)
# target.genes <- c("FUBP1","SF1","U2AF1","U2AF2","SNRPB","SNRPD1","SNRPD2",
#                   "SNRPD3","SNRPE","SNRPF","SNRPG","PUF60","SMNDC1",
#                   "DNAJC8","RBM17","CHERP","U2SURP","DHX15","DDX46")
# target.genes <- c("EIF3A","SMNDC1")
# target.genes <- c("FUBP1","U2AF2")
# target.genes <- c("PUF60")
target.genes <- c("SNRPF")
# target.genes <- c("CCND1")
# Entrez ID
classification.gene.HUGO <- "SNRPF"
classification.gene <- "6636"
sample.share <- 0.2
path <- "C:/Users/Martin/Documents/Master/Thesis/CCLE_data/"
# load CCLE dataset
expression.data <- readRDS(paste0(path,"Expression_Files/expression.data.rds"))
# change rownames format
expression.data.entrez <- expression.data
rownames(expression.data.entrez) <-
substr(rownames(expression.data),1,nchar(rownames(expression.data))-3)
# make rownames to first column
expression.data.entrez$entrezgene_id <- rownames(expression.data.entrez)
rownames(expression.data.entrez) <- NULL
expression.data.entrez <- expression.data.entrez %>%
select(entrezgene_id, everything())
# load Achilles and DRIVE
path <-
"C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/data/"
dep.scores.DRIVE <- readRDS(paste0(path,"dep.scores.DRIVE.rds"))
dep.scores.Achilles <- readRDS(paste0(path,"dep.scores.Achilles.rds"))
rm(path,expression.data)
source("helper_functions/calc.mean.diffs.and.p.values.R")
source("helper_functions/create_volcano_plot.R")
source("helper_functions/create.classification.table.expr.R")
source("helper_functions/find.significant.genes.R")
source("helper_functions/create.upset.plot.R")
expression.class.gene <- as.data.frame(
t(filter(expression.data.entrez,entrezgene_id==classification.gene))[-1,])
expression.class.gene$CCLE_ID <- rownames(expression.class.gene)
rownames(expression.class.gene) <- NULL
colnames(expression.class.gene) <- c("expr.level","CCLE_ID")
expression.class.gene$expr.level <- as.numeric(expression.class.gene$expr.level)
ggplot(expression.class.gene,aes(expr.level)) +
geom_histogram(bins = 40)
rm(expression.data.entrez, classification.gene)
cell.lines.DRIVE.CCLE <- intersect(dep.scores.DRIVE$CCLE_ID,
expression.class.gene$CCLE_ID)
cell.lines.Achilles.CCLE <- intersect(dep.scores.Achilles$CCLE_ID,
expression.class.gene$CCLE_ID)
count.table <- as.data.frame(cbind(length(cell.lines.DRIVE.CCLE),
length(cell.lines.Achilles.CCLE)))
colnames(count.table) <- c("DRIVE","Achilles")
rownames(count.table) <- "CCLE"
count.table %>%
kbl() %>%
kable_styling()
rm(cell.lines.DRIVE.CCLE,cell.lines.Achilles.CCLE,count.table)
class.tables <- create.classification.table.expr(
sample.share,expression.class.gene,dep.scores.DRIVE,dep.scores.Achilles)
class.table.DRIVE <- class.tables$DRIVE
class.table.Achilles <- class.tables$Achilles
rm(sample.share, expression.class.gene)
# show tables
class.table.DRIVE %>%
head() %>%
kbl(caption = "Classification Table in DRIVE") %>%
kable_styling()
class.table.Achilles %>%
head %>%
kbl(caption = "Classification Table in Achilles") %>%
kable_styling()
res <- calc.mean.diffs.and.p.values(dep.scores.DRIVE,dep.scores.Achilles,
class.table.DRIVE,class.table.Achilles)
rm(class.table.DRIVE,class.table.Achilles,class.tables,dep.scores.DRIVE,
dep.scores.Achilles)
plot.welch.DRIVE <- create_volcano_plot(res,"DRIVE","welch",target.genes)
plot.welch.Achilles <- create_volcano_plot(res,"Achilles","welch",target.genes)
grid.arrange(plot.welch.DRIVE,plot.welch.Achilles,ncol=2)
rm(plot.welch.DRIVE,plot.welch.Achilles)
plot.wilc.DRIVE <- create_volcano_plot(test_results = res,
dataset="DRIVE",
test_method = "wilc",
labeled_genes=target.genes,
show_y_label = T)
plot.wilc.Achilles <- create_volcano_plot(test_results = res,
dataset="Achilles",
test_method = "wilc",
labeled_genes=target.genes,
show_y_label = F)
plot <- grid.arrange(plot.wilc.DRIVE,plot.wilc.Achilles,ncol=2)
# save plot
# plot_path <-
# "C:/Users/Martin/Documents/Master/Thesis/report/plots/U2/expression_based/"
# ggsave(file=paste0(plot_path,"volcano_SNRPF_wilc_expr.svg"), plot=plot,
#        width=10)
# ggsave(file=paste0(plot_path,"volcano_SNRPF_wilc_expr.png"), plot=plot,
# width=10)
rm(plot.wilc.DRIVE,plot.wilc.Achilles)
plot.bayes.DRIVE <- create_volcano_plot(res,"DRIVE","bayes",target.genes)
plot.bayes.Achilles <- create_volcano_plot(res,"Achilles","bayes",target.genes)
grid.arrange(plot.bayes.DRIVE,plot.bayes.Achilles,ncol=2)
rm(plot.bayes.DRIVE,plot.bayes.Achilles,target.genes)
significant.genes <- find.significant.genes(res=res)
create.upset.plot(significant.genes)
source("helper_functions/list.significant.genes.R")
final.significant.genes <- list.significant.genes(significant.genes)
# show result
final.sign.genes['geneID'] %>%
kbl(caption = paste("Genes that are significant in",max.set,"sets.")) %>%
kable_styling()
# show result
final.significant.genes['geneID'] %>%
kbl(caption = paste("Genes that are significant in",max.set,"sets.")) %>%
kable_styling()
list.significant.genes <- function(significant.genes){
# create Boolean matrix for gene in sets
sign.genes.total <- unique(unlist(significant.genes))
genes.set.table <- as.data.frame(cbind(geneID=sign.genes.total))
check.dataset <- function(gene.name,dataset) {
return(gene.name %in% dataset)
}
if(length(significant.genes$welch.DRIVE)>0) {
genes.set.table$welch.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$welch.DRIVE)}
if(length(significant.genes$wilc.DRIVE)>0) {
genes.set.table$wilc.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$wilc.DRIVE)}
if(length(significant.genes$bayes.DRIVE)>0) {
genes.set.table$bayes.DRIVE <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$bayes.DRIVE)}
if(length(significant.genes$welch.Achilles)>0) {
genes.set.table$welch.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$welch.Achilles)}
if(length(significant.genes$wilc.Achilles)>0) {
genes.set.table$wilc.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$wilc.Achilles)}
if(length(significant.genes$bayes.Achilles)>0) {
genes.set.table$bayes.Achilles <-
sapply(genes.set.table$geneID, check.dataset,significant.genes$bayes.Achilles)}
# count how often genes occur in sets
genes.set.table$sum <- rowSums(genes.set.table[,-1])
# extract all genes that occur in maximal number of sets
max.set <- max(genes.set.table$sum)
final.sign.genes <- filter(genes.set.table,sum==max.set)
return(list(max.set=max.set,final.significant.genes=final.sign.genes))
}
final.significant.genes <- list.significant.genes(significant.genes)
final.significant.genes$final.significant.genes['geneID'] %>%
kbl(caption = paste("Genes that are significant in",
final.significant.genes$max.set,"sets.")) %>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(dplyr)
library(ggplot2)
library(kableExtra)
library(matrixTests)
library(limma)
library(ggrepel)
library(gridExtra)
library(ComplexHeatmap)
# target.genes <- c("FUBP1","SF1","U2AF1","U2AF2","SNRPB","SNRPD1","SNRPD2",
#                   "SNRPD3","SNRPE","SNRPF","SNRPG","PUF60","SMNDC1",
#                   "DNAJC8","RBM17","CHERP","U2SURP","DHX15","DDX46")
# target.genes <- c("EIF3A","SMNDC1")
# target.genes <- c("FUBP1","U2AF2")
# target.genes <- c("PUF60")
target.genes <- c("SNRPF")
# target.genes <- c("CCND1")
# Entrez ID
classification.gene.HUGO <- "SNRPF"
classification.gene <- "6636"
sample.share <- 0.2
path <- "C:/Users/Martin/Documents/Master/Thesis/CCLE_data/"
# load CCLE dataset
expression.data <- readRDS(paste0(path,"Expression_Files/expression.data.rds"))
# change rownames format
expression.data.entrez <- expression.data
rownames(expression.data.entrez) <-
substr(rownames(expression.data),1,nchar(rownames(expression.data))-3)
# make rownames to first column
expression.data.entrez$entrezgene_id <- rownames(expression.data.entrez)
rownames(expression.data.entrez) <- NULL
expression.data.entrez <- expression.data.entrez %>%
select(entrezgene_id, everything())
# load Achilles and DRIVE
path <-
"C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/data/"
dep.scores.DRIVE <- readRDS(paste0(path,"dep.scores.DRIVE.rds"))
dep.scores.Achilles <- readRDS(paste0(path,"dep.scores.Achilles.rds"))
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(dplyr)
library(ggplot2)
library(kableExtra)
library(matrixTests)
library(limma)
library(ggrepel)
library(gridExtra)
library(ComplexHeatmap)
# target.genes <- c("FUBP1","SF1","U2AF1","U2AF2","SNRPB","SNRPD1","SNRPD2",
#                   "SNRPD3","SNRPE","SNRPF","SNRPG","PUF60","SMNDC1",
#                   "DNAJC8","RBM17","CHERP","U2SURP","DHX15","DDX46")
# target.genes <- c("EIF3A","SMNDC1")
# target.genes <- c("FUBP1","U2AF2")
# target.genes <- c("PUF60")
target.genes <- c("SNRPF")
# target.genes <- c("CCND1")
# Entrez ID
classification.gene.HUGO <- "SNRPF"
classification.gene <- "6636"
sample.share <- 0.2
path <- "C:/Users/Martin/Documents/Master/Thesis/CCLE_data/"
# load CCLE dataset
expression.data <- readRDS(paste0(path,"Expression_Files/expression.data.rds"))
# change rownames format
expression.data.entrez <- expression.data
rownames(expression.data.entrez) <-
substr(rownames(expression.data),1,nchar(rownames(expression.data))-3)
# make rownames to first column
expression.data.entrez$entrezgene_id <- rownames(expression.data.entrez)
rownames(expression.data.entrez) <- NULL
expression.data.entrez <- expression.data.entrez %>%
select(entrezgene_id, everything())
# load Achilles and DRIVE
path <-
"C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/data/"
dep.scores.DRIVE <- readRDS(paste0(path,"dep.scores.DRIVE.rds"))
dep.scores.Achilles <- readRDS(paste0(path,"dep.scores.Achilles.rds"))
rm(path,expression.data)
source("helper_functions/calc.mean.diffs.and.p.values.R")
source("helper_functions/create_volcano_plot.R")
source("helper_functions/create.classification.table.expr.R")
source("helper_functions/find.significant.genes.R")
source("helper_functions/create.upset.plot.R")
source("helper_functions/list.significant.genes.R")
expression.class.gene <- as.data.frame(
t(filter(expression.data.entrez,entrezgene_id==classification.gene))[-1,])
expression.class.gene$CCLE_ID <- rownames(expression.class.gene)
rownames(expression.class.gene) <- NULL
colnames(expression.class.gene) <- c("expr.level","CCLE_ID")
expression.class.gene$expr.level <- as.numeric(expression.class.gene$expr.level)
ggplot(expression.class.gene,aes(expr.level)) +
geom_histogram(bins = 40)
rm(expression.data.entrez, classification.gene)
cell.lines.DRIVE.CCLE <- intersect(dep.scores.DRIVE$CCLE_ID,
expression.class.gene$CCLE_ID)
cell.lines.Achilles.CCLE <- intersect(dep.scores.Achilles$CCLE_ID,
expression.class.gene$CCLE_ID)
count.table <- as.data.frame(cbind(length(cell.lines.DRIVE.CCLE),
length(cell.lines.Achilles.CCLE)))
colnames(count.table) <- c("DRIVE","Achilles")
rownames(count.table) <- "CCLE"
count.table %>%
kbl() %>%
kable_styling()
rm(cell.lines.DRIVE.CCLE,cell.lines.Achilles.CCLE,count.table)
class.tables <- create.classification.table.expr(
sample.share,expression.class.gene,dep.scores.DRIVE,dep.scores.Achilles)
class.table.DRIVE <- class.tables$DRIVE
class.table.Achilles <- class.tables$Achilles
rm(sample.share, expression.class.gene)
# show tables
class.table.DRIVE %>%
head() %>%
kbl(caption = "Classification Table in DRIVE") %>%
kable_styling()
class.table.Achilles %>%
head %>%
kbl(caption = "Classification Table in Achilles") %>%
kable_styling()
res <- calc.mean.diffs.and.p.values(dep.scores.DRIVE,dep.scores.Achilles,
class.table.DRIVE,class.table.Achilles)
rm(class.table.DRIVE,class.table.Achilles,class.tables,dep.scores.DRIVE,
dep.scores.Achilles)
plot.welch.DRIVE <- create_volcano_plot(res,"DRIVE","welch",target.genes)
plot.welch.Achilles <- create_volcano_plot(res,"Achilles","welch",target.genes)
grid.arrange(plot.welch.DRIVE,plot.welch.Achilles,ncol=2)
rm(plot.welch.DRIVE,plot.welch.Achilles)
plot.wilc.DRIVE <- create_volcano_plot(test_results = res,
dataset="DRIVE",
test_method = "wilc",
labeled_genes=target.genes,
show_y_label = T)
plot.wilc.Achilles <- create_volcano_plot(test_results = res,
dataset="Achilles",
test_method = "wilc",
labeled_genes=target.genes,
show_y_label = F)
plot <- grid.arrange(plot.wilc.DRIVE,plot.wilc.Achilles,ncol=2)
# save plot
# plot_path <-
# "C:/Users/Martin/Documents/Master/Thesis/report/plots/U2/expression_based/"
# ggsave(file=paste0(plot_path,"volcano_SNRPF_wilc_expr.svg"), plot=plot,
#        width=10)
# ggsave(file=paste0(plot_path,"volcano_SNRPF_wilc_expr.png"), plot=plot,
# width=10)
rm(plot.wilc.DRIVE,plot.wilc.Achilles)
plot.bayes.DRIVE <- create_volcano_plot(res,"DRIVE","bayes",target.genes)
plot.bayes.Achilles <- create_volcano_plot(res,"Achilles","bayes",target.genes)
grid.arrange(plot.bayes.DRIVE,plot.bayes.Achilles,ncol=2)
rm(plot.bayes.DRIVE,plot.bayes.Achilles,target.genes)
significant.genes <- find.significant.genes(res=res)
create.upset.plot(significant.genes)
rm(res)
final.significant.genes <- list.significant.genes(significant.genes)
# show result
final.significant.genes$final.significant.genes['geneID'] %>%
kbl(caption = paste("Genes that are significant in",
final.significant.genes$max.set,"sets.")) %>%
kable_styling()
rm(significant.genes,final.significant.genes)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(dplyr)
library(ggplot2)
library(kableExtra)
library(matrixTests)
library(limma)
library(ggrepel)
library(gridExtra)
library(ComplexHeatmap)
# target.genes <- c("FUBP1","SF1","U2AF1","U2AF2","SNRPB","SNRPD1","SNRPD2",
#                   "SNRPD3","SNRPE","SNRPF","SNRPG","PUF60","SMNDC1",
#                   "DNAJC8","RBM17","CHERP","U2SURP","DHX15","DDX46")
# target.genes <- c("EIF3A","SMNDC1")
# target.genes <- c("FUBP1","U2AF2")
# target.genes <- c("PUF60")
target.genes <- c("SNRPF")
# target.genes <- c("CCND1")
# Entrez ID
classification.gene.HUGO <- "SNRPF"
classification.gene <- "6636"
sample.share <- 0.2
path <- "C:/Users/Martin/Documents/Master/Thesis/CCLE_data/"
# load CCLE dataset
expression.data <- readRDS(paste0(path,"Expression_Files/expression.data.rds"))
# change rownames format
expression.data.entrez <- expression.data
rownames(expression.data.entrez) <-
substr(rownames(expression.data),1,nchar(rownames(expression.data))-3)
# make rownames to first column
expression.data.entrez$entrezgene_id <- rownames(expression.data.entrez)
rownames(expression.data.entrez) <- NULL
expression.data.entrez <- expression.data.entrez %>%
select(entrezgene_id, everything())
# load Achilles and DRIVE
path <-
"C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/data/"
dep.scores.DRIVE <- readRDS(paste0(path,"dep.scores.DRIVE.rds"))
dep.scores.Achilles <- readRDS(paste0(path,"dep.scores.Achilles.rds"))
rm(path,expression.data)
source("helper_functions/calc.mean.diffs.and.p.values.R")
source("helper_functions/create_volcano_plot.R")
source("helper_functions/create.classification.table.expr.R")
source("helper_functions/find.significant.genes.R")
source("helper_functions/create.upset.plot.R")
source("helper_functions/list.significant.genes.R")
expression.class.gene <- as.data.frame(
t(filter(expression.data.entrez,entrezgene_id==classification.gene))[-1,])
expression.class.gene$CCLE_ID <- rownames(expression.class.gene)
rownames(expression.class.gene) <- NULL
colnames(expression.class.gene) <- c("expr.level","CCLE_ID")
expression.class.gene$expr.level <- as.numeric(expression.class.gene$expr.level)
ggplot(expression.class.gene,aes(expr.level)) +
geom_histogram(bins = 40)
rm(expression.data.entrez, classification.gene)
class.tables <- create.classification.table.expr(
sample.share,expression.class.gene,dep.scores.DRIVE,dep.scores.Achilles)
class.table.DRIVE <- class.tables$DRIVE
class.table.Achilles <- class.tables$Achilles
rm(sample.share, expression.class.gene)
# show tables
class.table.DRIVE %>%
head() %>%
kbl(caption = "Classification Table in DRIVE",
col.names = c("CCLE_ID","isHighlyExpressed")) %>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(dplyr)
library(ggplot2)
library(kableExtra)
library(matrixTests)
library(limma)
library(ggrepel)
library(gridExtra)
library(ComplexHeatmap)
library(readxl)
target.genes <- c("WRN")
path <-
"C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/data/"
MSI.status <- read_excel(paste0(path, "supplementary_table.xlsx"))
MSI.status <- MSI.status[,c(1,4)]
# load Achilles and DRIVE
dep.scores.DRIVE <- readRDS(paste0(path,"dep.scores.DRIVE.rds"))
dep.scores.Achilles <- readRDS(paste0(path,"dep.scores.Achilles.rds"))
rm(path)
source("helper_functions/calc.mean.diffs.and.p.values.R")
source("helper_functions/create_volcano_plot.R")
source("helper_functions/create.classification.table.expr.R")
# convert MSI status information to classification table
class.table <- MSI.status
class.table <- class.table %>% mutate(
isDeleterious = case_when(CCLE_MSI == "MSI" ~ T,CCLE_MSI == "MSS" ~ F))
class.table$CCLE_MSI <- NULL
class.table <- na.omit(class.table)
class.table.DRIVE <- merge(class.table,dep.scores.DRIVE['CCLE_ID'],
by="CCLE_ID")
class.table.Achilles <- merge(class.table,dep.scores.Achilles['CCLE_ID'],
by="CCLE_ID")
rm(MSI.status)
# show tables
class.table.DRIVE %>%
head() %>%
kbl(caption = "Classification Table in DRIVE") %>%
kable_styling()
# show tables
class.table.DRIVE %>%
head() %>%
kbl(caption = "Classification Table in DRIVE",
col.names = c("CCLE_ID","MSI")) %>%
kable_styling()
getwd()
setwd("C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection")
getwd()
library("renv")
renv::init()
getwd()
use_readme_rmd(open = rlang::is_interactive())
install.packages("usethis")
use_readme_rmd(open = rlang::is_interactive())
library("usethis")
use_readme_rmd(open = rlang::is_interactive())
getwd()
setwd("C:/Users/Martin/Documents/Master/Thesis/genetic_dependency_detection/project")
renv::init()
renv::dependencies()
renv::init()
renv::snapshot()
